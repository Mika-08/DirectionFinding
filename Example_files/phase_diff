import numpy as np
import scipy
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt

def plot(signal1, signal2, signal3):
    y1 = np.arange(0, len(signal1))
    y2 = np.arange(0, len(signal2))
    y3 = np.arange(0, len(signal3))
    #t = np.arange(0, len(signal1), 1/sample_rate)

    plt.plot(y1, signal1, label="1")
    plt.plot(y2, signal2, label="2")
    plt.plot(y3, signal3, label="3")
    plt.legend()
    plt.show()


center_freq = 434e6
sample_rate = 2.048e6
duration = 5  # Duration in seconds
wavelength = 3e8 / center_freq  # Speed of light divided by center frequency

on_duration = int(0.03 * sample_rate)
off_duration_short = int(0.03 * sample_rate)
off_duration_long = int(0.91 * sample_rate)

ref = np.concatenate([
    np.ones(on_duration),
    np.zeros(off_duration_short),
    np.ones(on_duration),
    np.zeros(off_duration_long)
])


def makeSignal(ref, sample_rate):
    # Define the carrier frequency

    # Generate the time vector for the base signal
    t = np.arange(len(ref)) / sample_rate

    # Generate the carrier signal
    carrier_signal = np.cos(2 * np.pi * center_freq * t)

    # Modulate the base signal with the carrier
    modulated_signal = ref * carrier_signal

    return modulated_signal



def makeNoise(signal):
    target_snr_db = 20

    x_watts = signal ** 2
    # Calculate signal power and convert to dB
    sig_avg_watts = np.mean(x_watts)
    sig_avg_db = 10 * np.log10(sig_avg_watts)
    # Calculate noise according to [2] then convert to watts
    noise_avg_db = sig_avg_db - target_snr_db
    noise_avg_watts = 10 ** (noise_avg_db / 10)
    # Generate a sample of white noise
    mean_noise = 0
    noise_volts = np.random.normal(mean_noise, np.sqrt(noise_avg_watts), len(x_watts))

    # Add the noise to the data.
    return signal + noise_volts

def addTimeShift(signal, t0, sample_rate):
    #n = len(s)
    fft_signal = scipy.fft.fft(signal)

    # Calculate the frequencies for each component
    #freqs = np.fft.fftfreq(n, d=1 / sample_rate)
    freqs = 433e6

    # Create the phase shift array for the given time shift t0
    phase_shifts = np.exp(-1j * 2 * np.pi * freqs * t0)

    # Apply the phase shifts to the FFT signal
    shifted_fft_signal = fft_signal * phase_shifts

    # Compute the inverse FFT to get the time-shifted signal
    shifted_signal = scipy.fft.ifft(shifted_fft_signal)

    return shifted_signal 
    
def directDifference(rx1, rx2):
    fft_signal1 = np.fft.fft(rx1)
    fft_signal2 = np.fft.fft(rx2)

    # Extract the phases
    phase_signal1 = np.angle(fft_signal1)
    phase_signal2 = np.angle(fft_signal2)
    # Find the dominant frequency index
    # (Here, we assume the dominant frequency is known and corresponds to the peak in the FFT magnitude)
    dominant_freq_idx = np.argmax(np.abs(fft_signal1))
    # plt.plot(phase_signal1)
    # plt.plot(phase_signal2)
    # plt.ylabel("phase")
    # plt.xlabel("frequency")
    # plt.title("Phase of the fft of incoming with a time difference of $2.005*10^{-10}$s")
    print(dominant_freq_idx)
    # Compute the phase difference
    phase_difference = phase_signal2[dominant_freq_idx] - phase_signal1[dominant_freq_idx]
    
    # Normalize phase difference to be between -pi and pi
    phase_difference = np.angle(np.exp(1j * phase_difference))
    return phase_difference


def identifyCode(ref, signal):
    target_len = np.size(ref, 0) + np.size(signal, 0) - 1
    ref_extended = np.pad(ref, (0,target_len - np.size(ref,0)))
    s_extended = np.pad(signal, (0, target_len - np.size(signal,0)))
    ref_fft = np.fft.fft(ref_extended)
    s_fft = np.fft.fft(s_extended)
    corr_f = s_fft*np.flip(np.conj(ref_fft)) #correlation in frequency domain
    corr = np.fft.ifft(corr_f)
    index = np.argmax(corr)
    return index, corr/np.max(corr)


def retreiveSamples(index, signal, num_samples):
    start_index = max(index - num_samples, 0)
    extracted_samples = signal[start_index:index]
    return extracted_samples


#modulated_ref = makeSignal(ref, sample_rate)
transmitted = np.hstack([ref])
shifted = addTimeShift(transmitted, 2.005e-10, sample_rate)
shifted2 = addTimeShift(transmitted, 0, sample_rate)
index, corr = identifyCode(ref, shifted)
samples1 = retreiveSamples(index, shifted, 184320)
samples2 = retreiveSamples(index, shifted2, 184320)
# plt.plot(corr)
# plt.plot(shifted)
# plt.show()
# plt.plot(shifted)
# plt.plot(shifted2)
# plt.show()

phasediff = directDifference(shifted, shifted2)
print(F"the phase difference between rx1 and rx2: {phasediff} radian")
aoa = np.rad2deg(np.arcsin(phasediff/np.pi))
print(F"The angle or arrival is: {aoa} degrees")
